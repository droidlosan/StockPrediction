# -*- coding: utf-8 -*-
"""HOMEWORK_FINANCE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CcUPXHoDz-0mnrG5y_UUbE4WwQEDA6Hm
"""

#IMPORT LIBRARIES
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

sns.set()

"""import dependecies
import dataset
define agent algorithm
plot predictions
"""

#INSTALL YAHOO FINANCE
!pip install yfinance --upgrade --no-cache-dir

#ACCESS TO MY DRIVE
import numpy as np
from google.colab import drive
drive.mount('drive', force_remount=True)

#CHARGE THE DATA
from pandas_datareader import data as pdr
import fix_yahoo_finance as yf

yf.pdr_override()
df_full = pdr.get_data_yahoo('BTC-USD', start ="2019-06-01").reset_index()
df_full.to_csv('BTC-USD.csv',index=False)
df_full.head(1000)

# matrix of work
dfreg = df_full.loc[:,['Adj Close','Volume']]
dfreg['HL_PCT'] = (df_full['High'] - df_full['Low']) / df_full['Close'] * 100.0
dfreg['PCT_change'] = (df_full['Close'] - df_full['Open']) / df_full['Open'] * 100.0
dfreg
# agregate vector of time
dfreg.index = df_full['Date']
dfreg

#IMPORT LIBRARIES
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor

from sklearn import preprocessing
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
import math

# Drop missing value
dfreg.fillna(value=-99999, inplace=True)
# We want to separate 1 percent of the data to forecast
forecast_out = int(math.ceil(0.01 * len(dfreg)))
# Separating the label here, we want to predict the AdjClose
forecast_col = 'Adj Close'
dfreg['label'] = dfreg[forecast_col].shift(-forecast_out)
X = np.array(dfreg.drop(['label'], 1))
# Scale the X so that everyone can have the same distribution for linear regression
X = preprocessing.scale(X)
# Finally We want to find Data Series of late X and early X (train) for model generation and evaluation
X_lately = X[-forecast_out:]
X = X[:-forecast_out]
# Separate label and identify it as y
y = np.array(dfreg['label'])
y = y[:-forecast_out]

# Linear regression
clfreg = LinearRegression(n_jobs=-1)
clfreg.fit(X, y)
# Quadratic Regression 2
clfpoly2 = make_pipeline(PolynomialFeatures(2), Ridge())
clfpoly2.fit(X, y)

# Quadratic Regression 3
clfpoly3 = make_pipeline(PolynomialFeatures(3), Ridge())
clfpoly3.fit(X, y)

# KNN Regression
clfknn = KNeighborsRegressor(n_neighbors=2)
clfknn.fit(X, y)

confidencereg = clfreg.score(X, y)
confidencepoly2 = clfpoly2.score(X,y)
confidencepoly3 = clfpoly3.score(X,y)
confidenceknn = clfknn.score(X, y)

print('The linear regression confidence is ', confidencereg)
print('The quadratic regression 2 confidence is ', confidencepoly2)
print('The quadratic regression 3 confidence is ', confidencepoly3)
print('The knn regression confidence is ', confidenceknn)

forecast_setLR = clfreg.predict(X_lately)
forecast_setP2 = clfpoly2.predict(X_lately)
forecast_setP3 = clfpoly3.predict(X_lately)
forecast_setKNN = clfknn.predict(X_lately)

#PLOT THE PREDICTION
from datetime import timedelta
last_date = dfreg.iloc[-1].name
last_unix = last_date
next_unix = last_unix + datetime.timedelta(days=1)

for i in forecast_setKNN:
    next_date = next_unix
    next_unix += datetime.timedelta(days=1)
    dfreg.loc[next_date] = [np.nan for _ in range(len(dfreg.columns)-1)]+[i]
dfreg['Adj Close'].tail(500).plot()
dfreg['ForecastKNN'].tail(500).plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

dfreg

#SUMARY
forecast_setKNN
forecast_setP2
forecast_setLR
forecast_setP3
print('Prediccion para los dos dias siguientes con K Nearest Neighbor', forecast_setKNN)
print('Con una confianza de: ', confidenceknn)
print('Prediccion para los dos dias siguientes con polinomio cuadratico', forecast_setP2)
print('Con una confianza de: ', confidencepoly2)
print('Prediccion para los dos dias siguientes con polinomio al cubo', forecast_setP3)
print('Con una confianza de: ', confidencepoly3)
print('Prediccion para los dos dias siguientes con regresion lineal', forecast_setLR)
print('Con una confianza de: ', confidencereg)